一个程序有多个进程				★★★★java支持多线程 ，采取的是抢占式调度★★★★
一个进程有多个线程

	并发：在一个时间段内执行
	并行：同时执行

★★★主线程★★★
	就是一个程序的入口 （main方法）


★★★用户线程：★★★
	主线程结束后用户线程还会继续运行,JVM存活；主线程结束后守护线程和JVM的状态，如果没有用户线程，都是守护线程，那么JVM结束（随之而来的是所有的一切烟消云散，包括所有的守护线程）。

★★★守护线程：（服务线程）★★★
	1：为用户线程提供服务的线程，在没有用户线程可服务时会自动的离开。
	2：优先级别比较低。
	3：生命周期：守护进程（Daemon）是运行在后台的一种特殊进程。它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。也就是说守护线程不依赖于终端，但是依赖于系统，与系统“同生共死”。那Java的守护线程是什么样子的呢。当JVM中所有的线程都是守护线程的时候，JVM就可以退出了；如果还有一个或以上的非守护线程则JVM不会退出。
	例如：  
	     JVM中的垃圾回收机制就是守护线程
★总结★
	1、当主线程一结束、（非守护线程的）子线程不会立即结束。
	2、当主线程一结束，（守护线程的）子线程会立即结束。
	3、子线程对象，在调用start()方法之前，通过调用setDaemon(true),将本子线程设置为守护线程。
	

★★★★线程的开启方法：
方法一：
	1：编写一个类继承Thread类，并重写run方法。
	2：创建该类对象。
	3：通过对象名 来调用方法 start（）方法来开启线程，并执行线程的任务。


方法二：
	1：编写一个Runnable接口的子类。
	2：创建Thread对象并将Runnable的子类对象做为参数。
	3：通过创建的Thread对象来调用start（）方法来开启线程，并执行线程的任务。


方法三：
	1：创建线程池对象:	Executors.newFixedThreadPool( int );
	2：编写Runable接口和Callable接口的实现类
	2：通过调用线程池对象的方法来获取线程对象来执行线程任务:    线程池对象 . submit( Runnable )
								.submit( Callable )


方法四：
	创建Thread和Runnable的匿名类。
		new  Thread类/Runnable接口（）{
			重写run方法
			.
			.
			.
		}.start();










