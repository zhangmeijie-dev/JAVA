线程之间的通信：
	多个线程在处理同一个资源时，但是处理动作去不同

线程的安全性：
	由于线程之间的通信，往往会发生一些安全隐患

解决办法：
	通过对多个线程之间共享分数据进行加上一个锁使的共享数据在多线中在一个时间端中只能被一个线程操作

方法一：同步代码块
        格式：
	synchronized（ 任何对象 ）{
		共享数据或共享的操作					
	}									
		
        使用步骤：
	1：在run方法中将可能发生安全隐患的代码写到该代码块中		
	
方法二：同步方法
        格式：
	权限修饰符    sychronized    返回值   方法名（ 参数列表 ）{ 
		共享数据或共享的操作
	}

        使用步骤：
	1：在成员位置编写一个同步方法，将可能发生安全隐患的操作封装进该方法
	2：在run方法中调用该同步方法
	
方法三：Lock锁
	Lock接口
		实现类   ：   Reentrantlock类
	
使用方法：
	1：在成员位置创建Lock接口的对象（ Reentrantlock类 ）
	2：在run方法中使用：在发生安全隐患操作的代码前调用Lock对象的方法lock()来获取锁
	3：然后在发生安全隐患操作的代码后面调用Lock对象的unlock()方法来释放锁



		
			