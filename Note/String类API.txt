String :      lang包下   
           public final class String{・・・・・・・・・}
构造方法：
   String (  )  -------创建一个空的字符串

   String（ byte [ ] ）--------------使用指定的数组和当前系统的默认编码表来创建一个字符串
                  （ 数组的类容是当前系统的默认字符编码表与之对应的字符 ）
   
   String（ byte [  ]  ，Charset ）-------------使用指定的编码表来解析字节数组来创建一个字符串
            byte[]-------------->被解析的字节数组
           Charset ------------->指定编码表         
   String （byte [ ] , int  ,  int ）------------------使用当前系统的默认编码表来解析byte[] 来创建一个字符串
           byte[]  -------------------->被解析的字节数组
           int ------------------------> 要解码的第一个 byte数组 的索引
           int ------------------------>要解码的长度

   String ( byte[] , int , int , Charset )  --------------使用指定的编码表来解析字节数组来创建一个字符串
            byte [ ]---------------->被解析的数组
            int -------------------->数组中要解析的 起始索引
            int -------------------->要解析的长度
            Charset --------------->指定编码表

String( char [ ] )

String( char [ ] , int ,  int  ) 

String（ String ）
      ・
      ・
      ・
      ・

常见方法：
  ★★★  length()------------>返回调用者的字符床的长度

★★★chatAt( int ) --------------返回指定索引上的指定的char值

★★★concat( String )------------------>将调用者和指定的String连接产生一个新的字符串并返回  （调用者在前，指定的String在后）
 
★★★contanins ( CharSequence ) ----------->判断指定字符串是否为调用者的子串
                CharSequence --------是一个接口是String类的接口也是StringBuffer类的接口 ，

★★★getByte（  ）    --------------> 使用当前系统的默认编码表来将调用者编码为一个Byte数组，并返回该数组

getByte（ Charset ）--------->使用指定的编码表来将调用者编码为一个Byte数组，并返回该数组

★★★getByte（ String  ）----------->使用指定的编码表来将调用者编码为一个Byte数组，并返回该数组
          String  String  ---------用来指定编码表  如： “GBK”・・・・・・

★★★indexOf ( int )  ----------------->返回指定的一个字符在调用者中的第一次出现的索引位置
            int  -----------指定一个字符

indexOf（  int ，int  ）   -------->返回指定的一个字符在指定的索引（包含该索引）后第一次出现的的索引
           int------------制定一个字符
           int------------开始的索引

★★★ indexOf（ String ）---------------> 返回指定的一个字符串（String）在调用者中第一次出现的索引

indexOf（ String ，int ）---------> 返回指定的一个字符串（String）在指定的索引（包含该索引）后第一次出现的的索引

★★★ lastIndexOf（ int ）---------------> 返回指定的一个字符在调用者中最后一次出现位置的索引

lastIndexOf ( int ,int )-------------->返回指定的一个字符在指定的索引（包含该索引）后最后一次出现的的索引

★★★ lastIndexOf ( String ) --------------> 返回指定的一个字符串（String）在调用者中最后一次出现的索引

lastIndexOf ( String ) -------------->返回指定的一个字符串在调用者中的指定索引后出现最后一次的索引

★★★isEmpty()---------------------> 判断调用者是否为空

★★★subString ( int ) ------------------------>  返回调用者的子串  从指定的索引开始到结尾  

★★★subString( int , int )----------------------> 返回调用者的子串  从指定的索引位置开始，到指定的索引前结束   （含头不含尾）
       int -----起始索引    包含
       int ------结束索引    不包含     

★★★ String[]  split  ( String )  ------------------------> 根据指定的正则表达式来将调用则进行切割便返回切割后的各个字符串
                                   String------------是一个正则表达式
  
★★★ replace ( String1 , String2 )  --------------------->将调用者中的所有  String1   换成 String2并返回

★★★ replaceFirst ( String1 ，String2 )--------------------->将调用者中第一次满足String1（正则表达式）表示的字符串的字符换为String2字符串

★★★ replaceAll ( String , String ) -------------------------->将调用者中所有满足String1（正则表达式）表示的字符串的字符替换为String2字符串


★★★toLowerCase（  ）------------------------------>将调用者中的所有字母类型的字符全转为小写
★★★toUpperCase（  ）------------------------------>将调用者中的所有字母类型的字符全转为大写


★★★★★★ matches（ String ）---------------------->判断调用者是否满足指定的正则表达式